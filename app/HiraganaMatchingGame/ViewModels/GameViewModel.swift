import Foundation
import SwiftData

@Observable
class GameViewModel {
    var currentLevel: Int = 1
    var currentQuestion: Int = 1
    var score: Int = 0
    var totalQuestions: Int = 5
    var isGameCompleted: Bool = false
    var currentHiragana: String = ""
    var answerChoices: [HiraganaItem] = []
    var gameStartTime: Date = Date()
    var showFeedback: Bool = false
    var lastAnswerCorrect: Bool = false
    var earnedStars: Int = 0
    
    private let gameLogicService: GameLogicService
    private let audioService: AudioService
    private let starUnlockService: StarUnlockService
    private let levelProgressionService: LevelProgressionService
    private var currentQuestions: [GameQuestion] = []
    private var currentQuestionIndex: Int = 0
    
    init(gameLogicService: GameLogicService = GameLogicService(), 
         audioService: AudioService = AudioService(),
         starUnlockService: StarUnlockService = StarUnlockService(),
         levelProgressionService: LevelProgressionService = LevelProgressionService()) {
        self.gameLogicService = gameLogicService
        self.audioService = audioService
        self.starUnlockService = starUnlockService
        self.levelProgressionService = levelProgressionService
    }
    
    convenience init(userSettings: UserSettings) {
        let audioService = AudioService(userSettings: userSettings)
        let gameLogicService = GameLogicService(userSettings: userSettings)
        self.init(
            gameLogicService: gameLogicService,
            audioService: audioService,
            starUnlockService: StarUnlockService(),
            levelProgressionService: LevelProgressionService()
        )
    }
    
    func startNewGame(level: Int) {
        currentLevel = level
        currentQuestion = 1
        score = 0
        isGameCompleted = false
        showFeedback = false
        gameStartTime = Date()
        currentQuestionIndex = 0
        
        // GameLogicService„Çí‰Ωø„Å£„Å¶ÂïèÈ°å„ÇíÁîüÊàê
        currentQuestions = gameLogicService.generateQuestionsForLevel(level, questionCount: totalQuestions)
        
        if !currentQuestions.isEmpty {
            loadCurrentQuestion()
            
            // Èü≥Â£∞„Çí‰∫ãÂâçË™≠„ÅøËæº„Åø
            Task {
                await audioService.preloadAudioForLevel(level)
            }
        }
    }
    
    func selectAnswer(_ imageName: String) {
        guard currentQuestionIndex < currentQuestions.count else { return }
        
        let currentGameQuestion = currentQuestions[currentQuestionIndex]
        let isCorrect = gameLogicService.isCorrectAnswer(hiragana: currentGameQuestion.hiragana, imageName: imageName)
        
        // Ê≠£Ëß£Âà§ÂÆö
        if isCorrect {
            score += 1
            lastAnswerCorrect = true
            
            // Ê≠£Ëß£Èü≥„ÇíÂÜçÁîü„Åó„Å¶„Åã„Çâ„ÄÅ„Å≤„Çâ„Åå„Å™Èü≥Â£∞„ÇíÂÜçÁîü
            audioService.playCorrectSound()
            
            // Ê≠£Ëß£Èü≥„ÅÆÂÜçÁîüÂÆå‰∫ÜÂæå„Å´„Å≤„Çâ„Åå„Å™Èü≥Â£∞„ÇíÂÜçÁîü
            Task {
                // Ê≠£Ëß£Èü≥„ÅÆÂÜçÁîüÊôÇÈñìÂàÜÂæÖÊ©üÔºàÁ¥Ñ0.5ÁßíÔºâ
                try? await Task.sleep(nanoseconds: 600_000_000) // 0.6ÁßíÂæÖÊ©ü
                await audioService.playAudio(for: currentGameQuestion.hiragana)
            }
        } else {
            lastAnswerCorrect = false
            
            // ‰∏çÊ≠£Ëß£Èü≥„ÇíÂÜçÁîü
            audioService.playIncorrectSound()
        }
        
        // „Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØË°®Á§∫
        showFeedback = true
        
        // Ê¨°„ÅÆÂïèÈ°å„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÇíÂ¢óÂä†
        currentQuestionIndex += 1
        
        // „Ç≤„Éº„É†ÂÆå‰∫ÜÂà§ÂÆö
        if currentQuestionIndex >= currentQuestions.count {
            completeGame()
        } else {
            // Ê¨°„ÅÆÂïèÈ°å„Å´ÈÄ≤„ÇÄ
            currentQuestion += 1
            
            // Áü≠„ÅÑÈÅÖÂª∂Âæå„Å´Ê¨°„ÅÆÂïèÈ°å„ÇíË°®Á§∫
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {
                self.showFeedback = false
                self.loadCurrentQuestion()
            }
        }
    }
    
    func getCorrectAnswer() -> HiraganaItem {
        guard currentQuestionIndex < currentQuestions.count else {
            return HiraganaItem(character: "", imageName: "", category: "")
        }
        return currentQuestions[currentQuestionIndex].correctAnswer
    }
    
    func calculateStars(for score: Int) -> Int {
        return gameLogicService.calculateStars(correctAnswers: score, totalQuestions: totalQuestions)
    }
    
    func resetGame() {
        currentLevel = 1
        currentQuestion = 1
        score = 0
        isGameCompleted = false
        currentHiragana = ""
        answerChoices = []
        showFeedback = false
        earnedStars = 0
        currentQuestions = []
        currentQuestionIndex = 0
    }
    
    func playHiraganaSound() {
        guard !currentHiragana.isEmpty else { 
            print("‚ö†Ô∏è playHiraganaSound: currentHiragana is empty")
            return 
        }
        
        print("üîä Playing sound for: \(currentHiragana)")
        
        Task {
            await audioService.playAudio(for: currentHiragana)
        }
    }
    
    func getGameStats() -> GameStats {
        let timeTaken = Date().timeIntervalSince(gameStartTime)
        return gameLogicService.calculateGameStats(
            correctAnswers: score,
            totalQuestions: totalQuestions,
            timeTaken: timeTaken
        )
    }
    
    func getHint() -> String {
        return gameLogicService.generateHint(for: currentHiragana)
    }
    
    func canUnlockNextLevel(withTotalStars totalStars: Int) -> Bool {
        let nextLevel = currentLevel + 1
        return gameLogicService.canUnlockLevel(nextLevel, withStars: totalStars)
    }
    
    private func loadCurrentQuestion() {
        guard currentQuestionIndex < currentQuestions.count else { return }
        
        let question = currentQuestions[currentQuestionIndex]
        currentHiragana = question.hiragana
        answerChoices = question.choices
    }
    
    private func completeGame() {
        isGameCompleted = true
        let timeTaken = Date().timeIntervalSince(gameStartTime)
        let accuracy = Double(score) / Double(totalQuestions)
        
        // „Çπ„Çø„ÉºÁç≤ÂæóË®àÁÆó
        earnedStars = starUnlockService.calculateStars(
            correctAnswers: score,
            totalQuestions: totalQuestions,
            timeTaken: timeTaken
        )
        
        // „É¨„Éô„É´ÂÆå‰∫ÜË®òÈå≤
        starUnlockService.recordLevelCompletion(
            level: currentLevel,
            stars: earnedStars,
            accuracy: accuracy,
            time: timeTaken
        )
        
        // „É¨„Éô„É´ÈÄ≤Ë°å„Çµ„Éº„Éì„Çπ„Å´„ÇÇË®òÈå≤
        levelProgressionService.completeLevel(currentLevel, earnedStars: earnedStars)
        
        // „Ç≤„Éº„É†ÂÆå‰∫ÜÊôÇ„ÅÆÈü≥Â£∞ÂÅúÊ≠¢
        audioService.stopAllAudio()
    }
    
    func getCurrentProgress() -> Double {
        return Double(currentQuestion - 1) / Double(totalQuestions)
    }
    
    func getScorePercentage() -> Double {
        return Double(score) / Double(totalQuestions)
    }
    
    func getTimeElapsed() -> TimeInterval {
        return Date().timeIntervalSince(gameStartTime)
    }
    
    func skipQuestion() {
        // „Éí„É≥„ÉàÊ©üËÉΩ„Å®„Åó„Å¶„ÄÅÂïèÈ°å„Çí„Çπ„Ç≠„ÉÉ„Éó
        currentQuestion += 1
        currentQuestionIndex += 1
        
        if currentQuestion > totalQuestions {
            completeGame()
        } else {
            loadCurrentQuestion()
        }
    }
}